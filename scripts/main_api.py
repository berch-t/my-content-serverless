# /// script
# dependencies = [
#     "fastapi>=0.104.0",
#     "uvicorn[standard]>=0.24.0",
#     "pandas>=2.0.0",
#     "numpy>=1.24.0",
#     "scikit-learn>=1.3.0",
#     "scikit-surprise>=1.1.3",
#     "pydantic>=2.5.0",
#     "python-multipart>=0.0.6"
# ]
# requires-python = ">=3.9"
# ///

"""
API Principale - Syst√®me de Recommandation My Content

API FastAPI pour servir les recommandations d'articles hybrides.
Compatible avec la commande: uv run uvicorn main_api:app --reload --host 127.0.0.1 --port 8000

Endpoints:
- GET /recommend/{user_id}: Recommande 5 articles pour un utilisateur
- GET /health: V√©rification du statut de l'API
- GET /stats: Statistiques du syst√®me
"""

from fastapi import FastAPI, HTTPException, Query
from fastapi.responses import JSONResponse
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any
import pandas as pd
import numpy as np
import pickle
import os
from pathlib import Path
import logging
from sklearn.metrics.pairwise import cosine_similarity

# Configuration logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Mod√®les pydantic pour les r√©ponses API
class RecommendationResponse(BaseModel):
    user_id: int = Field(..., description="ID de l'utilisateur")
    recommendations: List[int] = Field(..., description="Liste des 5 articles recommand√©s")
    method: str = Field(..., description="M√©thode utilis√©e (hybrid/content-based/collaborative)")
    confidence: float = Field(..., description="Score de confiance (0.0 √† 1.0)")

class HealthResponse(BaseModel):
    status: str = Field(..., description="Statut de l'API")
    models_loaded: bool = Field(..., description="Mod√®les charg√©s avec succ√®s")
    version: str = Field(..., description="Version de l'API")

class StatsResponse(BaseModel):
    total_users: int
    total_articles: int
    model_version: str
    api_version: str

class ArticleMetadata(BaseModel):
    article_id: int
    category_id: Optional[int] = None
    words_count: Optional[int] = None
    title: str
    category: str
    description: str

class ArticlesMetadataResponse(BaseModel):
    articles: List[ArticleMetadata]

# Instance FastAPI
app = FastAPI(
    title="My Content Recommendation API",
    description="API de recommandation hybride d'articles",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# Configuration CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "http://127.0.0.1:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Variables globales pour les mod√®les
models_data = {}
is_loaded = False

def load_models() -> bool:
    """Charge tous les mod√®les n√©cessaires."""
    global models_data, is_loaded
    
    try:
        models_dir = Path("models")
        
        # V√©rifier existence du dossier models
        if not models_dir.exists():
            logger.error(f"‚ùå Dossier models introuvable: {models_dir}")
            return False
        
        # Charger mod√®le Surprise
        with open(models_dir / "surprise_model.pkl", 'rb') as f:
            models_data['surprise_model'] = pickle.load(f)
        
        # Charger embeddings
        embeddings_file = models_dir / "embeddings.pkl"
        pca_file = models_dir / "embeddings_pca.pkl"
        
        if pca_file.exists():
            with open(pca_file, 'rb') as f:
                emb_data = pickle.load(f)
                models_data['embeddings'] = emb_data['embeddings']
                models_data['pca'] = emb_data.get('pca')
        elif embeddings_file.exists():
            with open(embeddings_file, 'rb') as f:
                models_data['embeddings'] = pickle.load(f)
        else:
            raise FileNotFoundError("Fichier embeddings introuvable")
        
        # Charger m√©tadonn√©es articles
        with open(models_dir / "articles_metadata.pkl", 'rb') as f:
            articles_df = pickle.load(f)
            models_data['articles_metadata'] = articles_df
            # Cr√©er un dictionnaire pour acc√®s rapide
            models_data['articles_dict'] = articles_df.set_index('article_id').to_dict('index')
        
        # Charger configuration
        with open(models_dir / "config.pkl", 'rb') as f:
            models_data['config'] = pickle.load(f)
        
        logger.info("‚úÖ Tous les mod√®les charg√©s avec succ√®s")
        is_loaded = True
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur chargement mod√®les: {e}")
        return False

def content_based_recommendations(user_id: int, n_recs: int = 5) -> List[int]:
    """G√©n√®re des recommandations content-based utilisant les embeddings."""
    if not is_loaded:
        return []
    
    try:
        embeddings = models_data['embeddings']
        
        # Simuler le dernier article pour l'utilisateur (√† am√©liorer avec vraies donn√©es)
        # En production, il faudrait une base de donn√©es des interactions utilisateur
        np.random.seed(user_id)
        last_article_idx = np.random.randint(0, len(embeddings))
        
        # Calculer similarit√© cosinus
        article_embedding = embeddings[last_article_idx].reshape(1, -1)
        similarities = cosine_similarity(article_embedding, embeddings)[0]
        
        # Obtenir top articles similaires (exclure l'article lui-m√™me)
        similar_indices = np.argsort(similarities)[::-1][1:n_recs+1]
        
        return similar_indices.tolist()
        
    except Exception as e:
        logger.error(f"‚ùå Erreur content-based pour user {user_id}: {e}")
        return []

def collaborative_recommendations(user_id: int, n_recs: int = 5) -> List[int]:
    """G√©n√®re des recommandations collaborative filtering avec Surprise."""
    if not is_loaded:
        return []
    
    try:
        surprise_model = models_data['surprise_model']
        config = models_data['config']
        total_articles = config['total_articles']
        
        # Pr√©dire des ratings pour tous les articles pour cet utilisateur
        predictions = []
        for article_id in range(min(1000, total_articles)):  # Limiter pour performance
            try:
                pred = surprise_model.predict(user_id, article_id)
                predictions.append((article_id, pred.est))
            except:
                continue
        
        # Trier par rating pr√©dit d√©croissant
        predictions.sort(key=lambda x: x[1], reverse=True)
        
        # Retourner top N articles
        recommendations = [article_id for article_id, _ in predictions[:n_recs]]
        return recommendations
        
    except Exception as e:
        logger.error(f"‚ùå Erreur collaborative pour user {user_id}: {e}")
        return []

def get_hybrid_recommendations(user_id: int, n_recs: int = 5) -> Dict[str, Any]:
    """G√©n√®re des recommandations hybrides combinant CB et CF."""
    if not is_loaded:
        raise HTTPException(status_code=503, detail="Mod√®les non charg√©s")
    
    try:
        config = models_data['config']
        hybrid_weights = config['hybrid_weights']
        weight_cb = hybrid_weights['content_based']
        weight_cf = hybrid_weights['collaborative']
        
        # Obtenir recommandations des deux syst√®mes
        cb_recs = content_based_recommendations(user_id, n_recs * 2)
        cf_recs = collaborative_recommendations(user_id, n_recs * 2)
        
        # Scoring hybride
        hybrid_scores = {}
        
        # Scorer les recommandations Content-Based
        for i, article_id in enumerate(cb_recs):
            score = weight_cb * (1.0 - i / len(cb_recs)) if cb_recs else 0
            hybrid_scores[article_id] = hybrid_scores.get(article_id, 0) + score
        
        # Scorer les recommandations Collaborative
        for i, article_id in enumerate(cf_recs):
            score = weight_cf * (1.0 - i / len(cf_recs)) if cf_recs else 0
            hybrid_scores[article_id] = hybrid_scores.get(article_id, 0) + score
        
        # Si pas de recommandations hybrides, fallback sur recommandations al√©atoires
        if not hybrid_scores:
            logger.warning(f"Aucune recommandation hybride pour user {user_id}, fallback al√©atoire")
            np.random.seed(user_id)
            total_articles = config['total_articles']
            recommendations = np.random.choice(range(total_articles), 
                                             size=min(n_recs, total_articles), 
                                             replace=False).tolist()
            method = 'random_fallback'
            confidence = 0.3
        else:
            # Trier par score hybride d√©croissant
            sorted_recs = sorted(hybrid_scores.items(), key=lambda x: x[1], reverse=True)
            recommendations = [article_id for article_id, _ in sorted_recs[:n_recs]]
            method = 'hybrid'
            confidence = min(0.95, 0.6 + len(hybrid_scores) * 0.05)  # Confiance bas√©e sur nombre de recs
        
        return {
            'recommendations': recommendations,
            'method': method,
            'confidence': confidence,
            'metadata': {
                'cb_count': len(cb_recs),
                'cf_count': len(cf_recs),
                'hybrid_candidates': len(hybrid_scores),
                'weights': {'content_based': weight_cb, 'collaborative': weight_cf},
                'algorithm_version': config['model_version']
            }
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erreur g√©n√©ration recommandations hybrides pour user {user_id}: {e}")
        raise HTTPException(status_code=500, detail="Erreur interne de recommandation")

@app.on_event("startup")
async def startup_event():
    """Initialisation au d√©marrage de l'API."""
    logger.info("üöÄ D√©marrage API My Content")
    success = load_models()
    
    if not success:
        logger.error("‚ùå Impossible de charger les mod√®les")
    else:
        logger.info("‚úÖ API pr√™te √† servir les recommandations")

@app.get("/health", response_model=HealthResponse)
async def health_check():
    """Endpoint de v√©rification de sant√© de l'API."""
    return HealthResponse(
        status="healthy" if is_loaded else "unhealthy",
        models_loaded=is_loaded,
        version="1.0.0"
    )

@app.get("/recommend/{user_id}", response_model=RecommendationResponse)
async def recommend_articles(
    user_id: int,
    n_recommendations: int = Query(5, ge=1, le=10, description="Nombre de recommandations (1-10)")
):
    """
    Recommande des articles pour un utilisateur donn√©.
    
    - **user_id**: ID de l'utilisateur pour lequel g√©n√©rer des recommandations
    - **n_recommendations**: Nombre d'articles √† recommander (d√©faut: 5)
    """
    # Validation manuelle du user_id
    if user_id < 0:
        raise HTTPException(
            status_code=422,
            detail="user_id doit √™tre un entier positif ou z√©ro"
        )
    
    if not is_loaded:
        raise HTTPException(
            status_code=503, 
            detail="Service indisponible: mod√®les non charg√©s"
        )
    
    try:
        # G√©n√©rer recommandations
        result = get_hybrid_recommendations(user_id, n_recommendations)
        
        return RecommendationResponse(
            user_id=user_id,
            recommendations=result['recommendations'],
            method=result['method'],
            confidence=result['confidence']
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Erreur inattendue pour user {user_id}: {e}")
        raise HTTPException(status_code=500, detail="Erreur interne du serveur")

@app.get("/stats", response_model=StatsResponse)
async def get_stats():
    """Retourne les statistiques du syst√®me."""
    if not is_loaded:
        raise HTTPException(status_code=503, detail="Mod√®les non charg√©s")
    
    config = models_data['config']
    training_stats = config.get('training_stats', {})
    
    return StatsResponse(
        total_users=training_stats.get('nb_users', 0),
        total_articles=training_stats.get('nb_articles', 0),
        model_version=config.get('model_version', '1.0.0'),
        api_version="1.0.0"
    )

@app.get("/articles/metadata", response_model=ArticlesMetadataResponse)
async def get_articles_metadata(article_ids: str = Query(..., description="IDs d'articles s√©par√©s par des virgules")):
    """Retourne les m√©tadonn√©es pour une liste d'articles."""
    if not is_loaded:
        raise HTTPException(status_code=503, detail="Mod√®les non charg√©s")
    
    try:
        # Parser les IDs d'articles
        ids = [int(x.strip()) for x in article_ids.split(',')]
        
        articles_dict = models_data['articles_dict']
        articles = []
        
        # Cat√©gories simul√©es pour la d√©mo
        categories_map = {
            1: "Actualit√©s", 2: "Sport", 3: "Technologie", 4: "Culture", 5: "√âconomie",
            6: "Politique", 7: "Science", 8: "Sant√©", 9: "Lifestyle", 10: "Voyage"
        }
        
        for article_id in ids:
            if article_id in articles_dict:
                article_data = articles_dict[article_id]
                category_id = article_data.get('category_id', 1)
                category = categories_map.get(category_id, "Actualit√©s")
                
                # G√©n√©rer titre et description bas√©s sur l'ID pour la d√©mo
                titles = [
                    f"Les derni√®res innovations en {category.lower()}",
                    f"Analyse approfondie : {category} en 2024",
                    f"D√©couverte majeure dans le domaine {category.lower()}",
                    f"Tendances actuelles en {category.lower()}",
                    f"Expertise {category.lower()} : ce qu'il faut savoir"
                ]
                
                descriptions = [
                    f"Une exploration d√©taill√©e des d√©veloppements r√©cents en {category.lower()} avec des insights d'experts.",
                    f"Analyse compl√®te des enjeux et opportunit√©s du secteur {category.lower()}.",
                    f"D√©couvrez les derni√®res tendances et innovations qui fa√ßonnent {category.lower()}.",
                    f"Guide complet sur les √©volutions actuelles en {category.lower()}.",
                    f"Perspective d'expert sur les d√©fis et solutions en {category.lower()}."
                ]
                
                # Utiliser l'ID pour choisir titre/description de fa√ßon reproductible
                np.random.seed(article_id)
                title = np.random.choice(titles)
                description = np.random.choice(descriptions)
                
                articles.append(ArticleMetadata(
                    article_id=article_id,
                    category_id=category_id,
                    words_count=article_data.get('words_count', np.random.randint(200, 1000)),
                    title=title,
                    category=category,
                    description=description
                ))
            else:
                # Article non trouv√©, cr√©er des donn√©es par d√©faut
                articles.append(ArticleMetadata(
                    article_id=article_id,
                    category_id=1,
                    words_count=500,
                    title=f"Article {article_id}",
                    category="Actualit√©s",
                    description="Contenu personnalis√© s√©lectionn√© par notre syst√®me de recommandation."
                ))
        
        return ArticlesMetadataResponse(articles=articles)
        
    except ValueError as e:
        raise HTTPException(status_code=422, detail="Format d'IDs invalide")
    except Exception as e:
        logger.error(f"‚ùå Erreur r√©cup√©ration m√©tadonn√©es: {e}")
        raise HTTPException(status_code=500, detail="Erreur interne")

@app.get("/")
async def root():
    """Endpoint racine avec informations de base."""
    return {
        "message": "My Content Recommendation API",
        "version": "1.0.0",
        "status": "running" if is_loaded else "loading",
        "endpoints": {
            "recommendations": "/recommend/{user_id}",
            "health": "/health", 
            "stats": "/stats",
            "docs": "/docs"
        }
    }

@app.exception_handler(404)
async def not_found_handler(request, exc):
    """Gestionnaire d'erreur 404 personnalis√©."""
    return JSONResponse(
        status_code=404,
        content={"detail": "Endpoint non trouv√©", "available_endpoints": ["/", "/recommend/{user_id}", "/health", "/stats", "/docs"]}
    )

@app.exception_handler(500)
async def internal_error_handler(request, exc):
    """Gestionnaire d'erreur 500 personnalis√©."""
    logger.error(f"Erreur interne: {exc}")
    return JSONResponse(
        status_code=500,
        content={"detail": "Erreur interne du serveur", "support": "V√©rifiez les logs"}
    )

if __name__ == "__main__":
    import uvicorn
    
    # Configuration pour d√©veloppement
    uvicorn.run(
        "main_api:app",
        host="127.0.0.1",
        port=8000,
        reload=True,
        log_level="info"
    )